Behavioral Design Pattern

* Observer Design Pattern
	- Observer is a behavioral design pattern. It specifies communication between objects: observable and observers. 
	  An observable is an object which notifies observers about the changes in its state.
	- Example- Youtube has channel & that channel has multiple subscribers. If subscribers need to check for new videos 
				he need to check on that channel all the time. But if channel will notify all subscribers after uploading 
				the video, this pattern is called Observer Design Pattern. 

* Chain Of Responsibilities :
	- The Chain of Responsibility design pattern is a behavioral design pattern that allows an object to pass a request
	 along a chain of potential handlers until the request is handled or reaches the end of the chain. Each handler 
	 in the chain has the ability to handle the request or pass it to the next handler in the chain.

	- Here's how the Chain of Responsibility pattern can be implemented in Java:

	  Handler Interface: Define an interface that declares the common method(s) to handle the request. This interface
	    typically includes a method like handleRequest().

		interface Handler {
			void handleRequest(Request request);
		}
	  Concrete Handlers: Implement the Handler interface in multiple concrete classes, each representing a handler 
	    in the chain. Each handler decides whether it can handle the request or should pass it to the next handler in the chain.

		class ConcreteHandler1 implements Handler {
			private Handler nextHandler;

			public void setNextHandler(Handler nextHandler) {
				this.nextHandler = nextHandler;
			}

			public void handleRequest(Request request) {
				if (/* condition to handle the request */) {
					// Handle the request
				} else if (nextHandler != null) {
					nextHandler.handleRequest(request);
				}
			}
		}

		class ConcreteHandler2 implements Handler {
			private Handler nextHandler;

			public void setNextHandler(Handler nextHandler) {
				this.nextHandler = nextHandler;
			}

			public void handleRequest(Request request) {
				if (/* condition to handle the request */) {
					// Handle the request
				} else if (nextHandler != null) {
					nextHandler.handleRequest(request);
				}
			}
		}

	// More concrete handler classes can be added
	- Client Code: Create an instance of the first handler in the chain and set the next handler in the chain using
	  the setNextHandler() method. This establishes the chain of responsibility.

		public class Client {
			public static void main(String[] args) {
				Handler handler1 = new ConcreteHandler1();
				Handler handler2 = new ConcreteHandler2();

				handler1.setNextHandler(handler2);

				// Create a request
				Request request = new Request(/* request details */);

				// Pass the request to the first handler in the chain
				handler1.handleRequest(request);
			}
		}
	- In this example, the ConcreteHandler1 and ConcreteHandler2 classes represent the concrete handlers in the chain.
	  Each handler checks if it can handle the request based on certain conditions. If it can handle the request, 
	  it performs the necessary actions. Otherwise, it passes the request to the next handler in the chain by calling 
	  the handleRequest() method on the next handler. This process continues until a handler handles the request or
	  until the end of the chain is reached.

	- The Chain of Responsibility pattern allows for loose coupling between the sender of a request and its receivers. 
	  It provides a way to handle a request dynamically and allows for easy addition or removal of handlers in the 
	  chain without affecting the client code. It also promotes single responsibility by separating the logic of handling
	  requests into individual handlers.
	  
* Iterator Design Pattern
	- The Iterator design pattern provides a way to access the elements of a collection sequentially without exposing
	  its underlying structure. It decouples the iteration logic from the collection, allowing the collection to change
	  its internal structure without affecting the code that uses the iterator. In Java, the Iterator pattern is implemented
	  using the Iterator and Iterable interfaces.