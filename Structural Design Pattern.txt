Structural Design Pattern

* Adapter Design Pattern
	- Adapter design pattern is one of the structural design pattern and its used so that 
	  two unrelated interfaces can work together. The object that joins these unrelated interface is called an Adapter.
	- Example to understand this concept is Mobile charger adapter, in recent days every mobile company has their own
	  charging socket to charge the mobiles, so to connect one charger to another mobile adapter is designed , so we can 
	  charge the phone by using different charger.
	  

* Composit Design Pattern:
	- When we need to create a structure in a way that the objects in the structure has to be treated the same way, 
	  we can apply composite design pattern.
	- The intent of a composite is to “compose” objects into tree structures to represent part-whole hierarchies. 
	  It allows you to have a tree structure and ask each node in the tree structure to perform a task.
	- Example
		Computer(Composit Object) -> Cabinate(Composit Object)
								  -> PeripheralDevices(Composit Object)
								  -> MotherBoard(Composit Object)
		Cabinate (Composit Object)-> MotherBoard(Composit Object) & HardDrive(Leaf Object)
		MotherBoard(Composit Object)-> Ram (Leaf Object) & cpu(Leaf Object)
		PeripheralDevices(Composit Object) -> Mouse(Leaf Object) & KeyBoard(Leaf Object)
		
		All classes implements the Component Interface & that has one abstract method to showPrice(), they all implemented 
		that method.
		
* Proxy Design Pattern: 
	The Proxy design pattern provides a surrogate or placeholder for another object to control access to it. It allows
	you to create a proxy object that acts as an intermediary between the client and the real object. The proxy can perform
	additional tasks before or after forwarding the request to the real object, such as caching results, logging, access control, etc.

	In Java, the Proxy pattern can be implemented using either a static proxy or a dynamic proxy. Here's an example of 
	implementing the Proxy pattern using a static proxy:

		// Subject interface
		interface Image {
			void display();
		}

		// Real subject
		class RealImage implements Image {
			private String filename;

			public RealImage(String filename) {
				this.filename = filename;
				loadFromDisk();
			}

			private void loadFromDisk() {
				System.out.println("Loading image: " + filename);
			}

			public void display() {
				System.out.println("Displaying image: " + filename);
			}
		}

		// Proxy
		class ImageProxy implements Image {
			private String filename;
			private RealImage realImage;

			public ImageProxy(String filename) {
				this.filename = filename;
			}

			public void display() {
				if (realImage == null) {
					realImage = new RealImage(filename);
				}
				realImage.display();
			}
		}
	In the above example, we have an Image interface that defines the common operations for displaying an image. 
	The RealImage class is the real subject that performs the actual image loading and display operations. The ImageProxy
	class acts as a proxy to control access to the real image.

	The ImageProxy class holds a reference to the RealImage object and delegates the display() method to it. 
	However, before forwarding the request, it checks if the real image has been loaded. If not, it creates an instance
	of RealImage and then invokes the display() method on it.

	Here's an example of how you can use the Proxy pattern:

		public class Main {
			public static void main(String[] args) {
				Image image1 = new ImageProxy("image1.jpg");
				Image image2 = new ImageProxy("image2.jpg");

				// The real images are only loaded and displayed when requested
				image1.display();
				image2.display();
			}
		}
	In this example, we create two instances of ImageProxy and assign them to Image variables. When we call 
	the display() method on these proxies, the real images are only loaded and displayed on-demand, i.e., when
	the display() method is invoked.

	The Proxy pattern provides an additional layer of control and functionality between the client and the real object. 
	It can be useful for scenarios where you want to add extra behavior or perform tasks such as lazy loading, 
	caching, logging, or access control.
	
* Bridge Design Pattern: 
	- The Bridge design pattern is a structural design pattern that decouples an abstraction from its implementation,
	  allowing them to vary independently. It involves creating an interface (abstraction) that acts as a bridge 
	  between the client and the implementation. This pattern is useful when you want to decouple an abstraction 
	  from its implementation and have both vary independently.
	  
* Decorator Design Pattern: 
	- The Decorator design pattern is a structural design pattern that allows behavior to be added to an object 
	dynamically without affecting its original structure. It provides a way to add new functionality to an object 
	by wrapping it with decorator objects that modify its behavior.

	In Java, the Decorator pattern can be implemented using interfaces and abstract classes. Here's an example of
	implementing the Decorator pattern in Java:

		// Component interface
		interface Pizza {
			String getDescription();
			double getCost();
		}

		// Concrete component
		class BasicPizza implements Pizza {
			public String getDescription() {
				return "Basic Pizza";
			}

			public double getCost() {
				return 5.0;
			}
		}

		// Decorator
		abstract class PizzaDecorator implements Pizza {
			protected Pizza pizza;

			public PizzaDecorator(Pizza pizza) {
				this.pizza = pizza;
			}

			public String getDescription() {
				return pizza.getDescription();
			}

			public double getCost() {
				return pizza.getCost();
			}
		}

		// Concrete decorator
		class CheeseDecorator extends PizzaDecorator {
			public CheeseDecorator(Pizza pizza) {
				super(pizza);
			}

			public String getDescription() {
				return super.getDescription() + ", Cheese";
			}

			public double getCost() {
				return super.getCost() + 2.0;
			}
		}

		// Another concrete decorator
		class HamDecorator extends PizzaDecorator {
			public HamDecorator(Pizza pizza) {
				super(pizza);
			}

			public String getDescription() {
				return super.getDescription() + ", Ham";
			}

			public double getCost() {
				return super.getCost() + 3.0;
			}
		}
	In the above example, we have a Pizza interface that defines the common operations for a pizza. 
	 The BasicPizza class is a concrete implementation of Pizza. The PizzaDecorator is the abstract decorator
	 class that implements the Pizza interface and holds a reference to the wrapped Pizza object. The concrete
	 decorators, CheeseDecorator and HamDecorator, extend the PizzaDecorator and provide additional functionality.

	The concrete decorators modify the behavior of the wrapped Pizza object by overriding the getDescription() and
	 getCost() methods. They add their own descriptions and costs to the original pizza's description and cost.

	Here's an example of how you can use the Decorator pattern:

		public class Main {
			public static void main(String[] args) {
				// Creating a basic pizza
				Pizza pizza = new BasicPizza();
				System.out.println("Description: " + pizza.getDescription());
				System.out.println("Cost: $" + pizza.getCost());

				// Decorating the pizza with cheese
				pizza = new CheeseDecorator(pizza);
				System.out.println("Description: " + pizza.getDescription());
				System.out.println("Cost: $" + pizza.getCost());

				// Decorating the pizza with ham
				pizza = new HamDecorator(pizza);
				System.out.println("Description: " + pizza.getDescription());
				System.out.println("Cost: $" + pizza.getCost());
			}
		}
	In this example, we start with a basic pizza and gradually decorate it with cheese and ham. Each decoration
	adds its own description and cost to the original pizza. The output shows the final description and 
	cost of the decorated pizza.

	The Decorator pattern allows you to add new functionality to an object dynamically, providing a flexible
	alternative to subclassing. It follows the Open/Closed principle, as you can add new decorators without 
	modifying the original classes.
	
	Real World usage:- 
		Logging: Decorators are commonly used in logging frameworks to enhance the logging behavior. You can have
		a base logger implementation and then decorate it with additional features such as timestamping, log level
		filtering, or log formatting.

		Authentication and Authorization: In security systems, decorators can be used to add authentication and 
		authorization functionalities to the base objects. The decorators can perform tasks like user authentication,
		role-based access control, or permission checking, adding security layers to the underlying objects.

		Caching: The Decorator pattern can be applied in caching mechanisms, where decorators can add caching 
		capabilities to expensive or frequently accessed objects. Decorators can transparently cache the results
		of method calls and retrieve them for subsequent invocations, reducing the processing time.